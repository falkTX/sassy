#include "sassy.h"

// Based of cSID
// cSID by Hermit (Mihaly Horvath), (Year 2016..2017) http://hermit.sidrip.com
// (based on jsSID but totally revorked in C to be cycle-based & oversampled)
// License: WTF - Do what the fuck you want with this code, but I please mention me as its original author.

#include <stdlib.h>

#include <stdio.h>

#include <math.h>

#define C64_PAL_CPUCLK 985248

#if 0
namespace SIDsource
{



    typedef unsigned char byte;
    typedef unsigned char Uint8;

    // global constants and variables
#define SID_CHANNEL_AMOUNT 3
#define PAL_FRAMERATE 49.4 //important to match, otherwise some ADSR-sensitive tunes suffer.

    int OUTPUT_SCALEDOWN; // = SID_CHANNEL_AMOUNT * 16 + 26; 
    //raw output divided by this after multiplied by main volume, this also compensates for filter-resonance emphasis to avoid distotion

    enum {
        GATE_BITMASK = 0x01,
        SYNC_BITMASK = 0x02,
        RING_BITMASK = 0x04,
        TEST_BITMASK = 0x08,
        TRI_BITMASK = 0x10,
        SAW_BITMASK = 0x20,
        PULSE_BITMASK = 0x40,
        NOISE_BITMASK = 0x80,
        HOLDZERO_BITMASK = 0x10,
        DECAYSUSTAIN_BITMASK = 0x40,
        ATTACK_BITMASK = 0x80,
        LOWPASS_BITMASK = 0x10,
        BANDPASS_BITMASK = 0x20,
        HIGHPASS_BITMASK = 0x40,
        OFF3_BITMASK = 0x80
    };

    const byte FILTSW[9] = { 1,  2,  4,  1,  2,  4,  1,  2,  4 };
    byte ADSRstate[9];
    byte expcnt[9];
    byte envcnt[9];
    byte sourceMSBrise[9];
    unsigned int clock_ratio = 22;
    unsigned int ratecnt[9];
    unsigned int prevwfout[9];
    unsigned long int phaseaccu[9];
    unsigned long int prevaccu[9];
    unsigned long int sourceMSB[3];
    unsigned long int noise_LFSR[9];
    long int prevlowpass[3];
    long int prevbandpass[3];
    float cutoff_ratio_8580;
    float cutoff_ratio_6581;
    float cutoff_bias_6581;
    int SID_model = 8580;


    //function prototypes
    void cSID_init(int samplerate);
    int SIDemu(char num, unsigned int baseaddr);
    void initSID();
    unsigned int combinedWF(unsigned int* wfarray, int index, char differ6581);
    void createCombinedWF(unsigned int* wfarray, float bitmul, float bitstrength, float treshold);

    unsigned int TriSaw_8580[4096];
    unsigned int PulseSaw_8580[4096];
    unsigned int PulseTriSaw_8580[4096];
    int ADSRperiods[16] = { 9,  32,  63,  95,  149,  220,  267,  313,  392,  977,  1954,  3126,  3907,  11720,  19532,  31251 };
    const byte ADSR_exptable[256] = {
      1,  30,  30,  30,  30,  30,  30,  16,  16,  16,  16,  16,  16,  16,  16,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  4,  4,  4,  4,  4, //pos0:1  pos6:30  pos14:16  pos26:8
      4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,  1, //pos54:4 //pos93:2
      1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
      1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
      1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
      1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
      1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
      1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
    };

    void cSID_init(int samplerate) {
        int i;
        clock_ratio = (unsigned int)round(C64_PAL_CPUCLK / samplerate);
        cutoff_ratio_8580 = (float)(-2 * 3.14 * (12500.0 / 2048) / C64_PAL_CPUCLK);
        cutoff_ratio_6581 = (float)(-2 * 3.14 * (20000.0 / 2048) / C64_PAL_CPUCLK);
        cutoff_bias_6581 = (float)(1 - exp(-2 * 3.14 * 220 / C64_PAL_CPUCLK)); //around 220Hz below treshold

        createCombinedWF(TriSaw_8580, 0.8f, 2.4f, 0.64f);
        createCombinedWF(PulseSaw_8580, 1.4f, 1.9f, 0.68f);
        createCombinedWF(PulseTriSaw_8580, 0.8f, 2.5f, 0.64f);

        for (i = 0; i < 9; i++) {
            ADSRstate[i] = HOLDZERO_BITMASK;
            envcnt[i] = 0;
            ratecnt[i] = 0;
            phaseaccu[i] = 0;
            prevaccu[i] = 0;
            expcnt[i] = 0;
            noise_LFSR[i] = 0x7FFFF8;
            prevwfout[i] = 0;
        }
        for (i = 0; i < 3; i++) {
            sourceMSBrise[i] = 0;
            sourceMSB[i] = 0;
            prevlowpass[i] = 0;
            prevbandpass[i] = 0;
        }
        initSID();
    }

    void initSID() {
        int i;
        for (i = 0; i < 9; i++) {
            ADSRstate[i] = HOLDZERO_BITMASK;
            ratecnt[i] = envcnt[i] = expcnt[i] = 0;
        }
    }

    unsigned int combinedWF(unsigned int* wfarray, int index, char differ6581) {
        if (differ6581 && SID_model == 6581) index &= 0x7FF;
        return wfarray[index];
    }

    void createCombinedWF(unsigned int* wfarray, float bitmul, float bitstrength, float treshold) {
        int i, j, k;
        for (i = 0; i < 4096; i++) {
            wfarray[i] = 0;
            for (j = 0; j < 12; j++) {
                float bitlevel = 0;
                for (k = 0; k < 12; k++) {
                    bitlevel += (float)(bitmul / pow(bitstrength, fabs(k - j))) * (((i >> k) & 1) - 0.5);
                }
                wfarray[i] += (float)((bitlevel >= treshold) ? pow(2, j) : 0);
            }
            wfarray[i] *= 12;
        }
    }


    int SIDemu(unsigned int baseaddr) {
        //better keep these variables static so they won't slow down the routine like if they were internal automatic variables always recreated
        static byte channel, ctrl, SR, prevgate, wf, test, filterctrl_prescaler[3];
        static byte* sReg, * vReg;
        static unsigned int period, accuadd, pw, wfout;
        static unsigned long int MSB;
        static int nonfilt, filtin, cutoff[3], resonance[3]; //cutoff must be signed otherwise compiler may make errors in multiplications
        static long int output, filtout, ftmp; //so if samplerate is smaller, cutoff needs to be 'long int' as its value can exceed 32768
        byte memory[64];


        filtin = nonfilt = 0;
        sReg = &memory[baseaddr];
        vReg = sReg;
        for (channel = 0; channel < 3; channel++, vReg += 7) {
            ctrl = vReg[4];

            //ADSR envelope generator:
            {
                SR = vReg[6];
                prevgate = (ADSRstate[channel] & GATE_BITMASK);
                if (prevgate != (ctrl & GATE_BITMASK))
                { //gatebit-change?
                    if (prevgate)
                    {
                        ADSRstate[channel] &= 0xFF - (GATE_BITMASK | ATTACK_BITMASK | DECAYSUSTAIN_BITMASK);
                    } //falling edge
                    else
                    {
                        ADSRstate[channel] = (GATE_BITMASK | ATTACK_BITMASK | DECAYSUSTAIN_BITMASK); //rising edge, also sets hold_zero_bit=0
                    }
                }
                if (ADSRstate[channel] & ATTACK_BITMASK)
                {
                    period = ADSRperiods[vReg[5] >> 4];
                }
                else
                {
                    if (ADSRstate[channel] & DECAYSUSTAIN_BITMASK)
                    {
                        period = ADSRperiods[vReg[5] & 0xF];
                    }
                    else
                    {
                        period = ADSRperiods[SR & 0xF];
                    }
                }
                ratecnt[channel]++;
                ratecnt[channel] &= 0x7FFF; //can wrap around (ADSR delay-bug: short 1st frame)
                if (ratecnt[channel] == period)
                { //ratecounter shot (matches rateperiod) (in genuine SID ratecounter is LFSR)
                    ratecnt[channel] = 0; //reset rate-counter on period-match
                    if ((ADSRstate[channel] & ATTACK_BITMASK) || ++expcnt[channel] == ADSR_exptable[envcnt[channel]])
                    {
                        expcnt[channel] = 0;
                        if (!(ADSRstate[channel] & HOLDZERO_BITMASK))
                        {
                            if (ADSRstate[channel] & ATTACK_BITMASK)
                            {
                                envcnt[channel]++;
                                if (envcnt[channel] == 0xFF)
                                {
                                    ADSRstate[channel] &= 0xFF - ATTACK_BITMASK;
                                }
                            }
                            else
                            {
                                if (!(ADSRstate[channel] & DECAYSUSTAIN_BITMASK) || envcnt[channel] != (SR >> 4) + (SR & 0xF0))
                                {
                                    envcnt[channel]--; //resid adds 1 cycle delay, we omit that pipelining mechanism here
                                }
                                if (envcnt[channel] == 0)
                                {
                                    ADSRstate[channel] |= HOLDZERO_BITMASK;
                                }
                            }
                        }
                    }
                }
            }

            //WAVE generation codes (phase accumulator and waveform-selector):
            test = ctrl & TEST_BITMASK;
            wf = ctrl & 0xF0;
            accuadd = (vReg[0] + vReg[1] * 256);
            if (test || ((ctrl & SYNC_BITMASK) && sourceMSBrise[0]))
            {
                phaseaccu[channel] = 0;
            }
            else
            {
                phaseaccu[channel] += accuadd;
                phaseaccu[channel] &= 0xFFFFFF;
            }
            MSB = phaseaccu[channel] & 0x800000;
            sourceMSBrise[0] = (MSB > (prevaccu[channel] & 0x800000)) ? 1 : 0;
            if (wf & NOISE_BITMASK)
            {
                int tmp = noise_LFSR[channel];
                if (((phaseaccu[channel] & 0x100000) != (prevaccu[channel] & 0x100000)))
                {
                    int step = (tmp & 0x400000) ^ ((tmp & 0x20000) << 5);
                    tmp = ((tmp << 1) + (step ? 1 : test)) & 0x7FFFFF;
                    noise_LFSR[channel] = tmp;
                }
                wfout = (wf & 0x70) ? 0 : ((tmp & 0x100000) >> 5) + ((tmp & 0x40000) >> 4) + ((tmp & 0x4000) >> 1) + ((tmp & 0x800) << 1) + ((tmp & 0x200) << 2) + ((tmp & 0x20) << 5) + ((tmp & 0x04) << 7) + ((tmp & 0x01) << 8);
            }
            else if (wf & PULSE_BITMASK)
            {
                pw = (vReg[2] + (vReg[3] & 0xF) * 256) * 16;

                int tmp = phaseaccu[channel] >> 8;
                if (wf == PULSE_BITMASK)
                {
                    if (test || tmp >= pw)
                    {
                        wfout = 0xFFFF;
                    }
                    else
                    {
                        wfout = 0;
                    }
                }
                else
                { //combined pulse
                    wfout = (tmp >= pw || test) ? 0xFFFF : 0;
                    if (wf & TRI_BITMASK)
                    {
                        if (wf & SAW_BITMASK)
                        {
                            wfout = (wfout) ? combinedWF(PulseTriSaw_8580, tmp >> 4, 1) : 0;
                        } //pulse+saw+triangle (waveform nearly identical to tri+saw)
                        else
                        {
                            tmp = phaseaccu[channel] ^ (ctrl & RING_BITMASK ? sourceMSB[0] : 0);
                            wfout = (wfout) ? combinedWF(PulseSaw_8580, (tmp ^ (tmp & 0x800000 ? 0xFFFFFF : 0)) >> 11, 0) : 0;
                        }
                    } //pulse+triangle
                    else
                    {
                        if (wf & SAW_BITMASK)
                        {
                            wfout = (wfout) ? combinedWF(PulseSaw_8580, tmp >> 4, 1) : 0;
                        }
                    }
                }
            } //pulse+saw
            else if (wf & SAW_BITMASK)
            {
                wfout = phaseaccu[channel] >> 8; //saw
                if (wf & TRI_BITMASK) wfout = combinedWF(TriSaw_8580, wfout >> 4, 1); //saw+triangle
            }
            else if (wf & TRI_BITMASK)
            {
                int tmp = phaseaccu[channel] ^ (ctrl & RING_BITMASK ? sourceMSB[0] : 0);
                wfout = (tmp ^ (tmp & 0x800000 ? 0xFFFFFF : 0)) >> 7;
            }
            if (wf)
            {
                prevwfout[channel] = wfout;
            }
            else {
                wfout = prevwfout[channel];
            } //emulate waveform 00 floating wave-DAC
            prevaccu[channel] = phaseaccu[channel];
            sourceMSB[0] = MSB;
            if (sReg[0x17] & FILTSW[channel])
            {
                filtin += ((long int)wfout - 0x8000) * envcnt[channel] / 256;
            }
            else if ((FILTSW[channel] != 4) || !(sReg[0x18] & OFF3_BITMASK))
            {
                nonfilt += ((long int)wfout - 0x8000) * envcnt[channel] / 256;
            }
        }
        //update readable SID1-registers (some SID tunes might use 3rd channel ENV3/OSC3 value as control)
        if (0 == 0, memory[1] & 3)
        {
            sReg[0x1B] = wfout >> 8;
            sReg[0x1C] = envcnt[3];
        } //OSC3, ENV3 (some players rely on it) 

        //FILTER:
        filterctrl_prescaler[0]--;
        if (filterctrl_prescaler[0] == 0)
        { //calculate cutoff and resonance curves only at samplerate is still adequate and reduces CPU stress of frequent float calculations
            filterctrl_prescaler[0] = clock_ratio;
            cutoff[0] = 2 + sReg[0x16] * 8 + (sReg[0x15] & 7);
            if (SID_model == 8580)
            {
                cutoff[0] = (1 - exp(cutoff[0] * cutoff_ratio_8580)) * 0x10000;
                resonance[0] = (pow(2, ((4 - (sReg[0x17] >> 4)) / 8.0))) * 0x100; //resonance could be taken from table as well
            }
            else
            {
                cutoff[0] = (cutoff_bias_6581 + ((cutoff[0] < 192) ? 0 : 1 - exp((cutoff[0] - 192) * cutoff_ratio_6581))) * 0x10000;
                resonance[0] = ((sReg[0x17] > 0x5F) ? 8.0 / (sReg[0x17] >> 4) : 1.41) * 0x100;
            }
        }
        filtout = 0; //the filter-calculation itself can't be prescaled because sound-quality would suffer of no 'oversampling'
        ftmp = filtin + prevbandpass[0] * resonance[0] / 0x100 + prevlowpass[0];
        if (sReg[0x18] & HIGHPASS_BITMASK) filtout -= ftmp;
        ftmp = prevbandpass[0] - ftmp * cutoff[0] / 0x10000;
        prevbandpass[0] = ftmp;
        if (sReg[0x18] & BANDPASS_BITMASK) filtout -= ftmp;
        ftmp = prevlowpass[0] + ftmp * cutoff[0] / 0x10000;
        prevlowpass[0] = ftmp;
        if (sReg[0x18] & LOWPASS_BITMASK) filtout += ftmp;

        //output stage for one SID
        output = (nonfilt + filtout) * (sReg[0x18] & 0xF) / OUTPUT_SCALEDOWN;
        if (output >= 32767) output = 32767;
        else if (output <= -32768) output = -32768; //saturation logic on overload (not needed if the callback handles it)
        return (int)output; // master output
    }
}
#endif

namespace EvalFunc
{
    double sidfilter(double a_v, double a_mode, double a_resonance, double a_frequency, int cell, int memofs)
    {
        int* prev = (int*)(gCelldata[cell].mDynmem + memofs);

        int filtin = (int)(a_v * 32768);
        int cutoff = 2 + (int)(a_frequency);
        if (cutoff < 2) cutoff = 2;
        //if (cutoff > 2050) cutoff = 2050;
        int mode = (int)a_mode;
        int resonance = (int)a_resonance;
        if (resonance < 0) resonance = 0;
        //if (resonance > 15) resonance = 15; // sid goes up to 4 bits, let's try higher
        float cutoff_ratio_8580 = (float)(-2 * 3.14 * (12500.0 / 2048) / C64_PAL_CPUCLK);
        float cutoff_ratio_6581 = (float)(-2 * 3.14 * (20000.0 / 2048) / C64_PAL_CPUCLK);
        float cutoff_bias_6581 = (float)(1 - exp(-2 * 3.14 * 220 / C64_PAL_CPUCLK)); //around 220Hz below treshold

        if (mode & 8)//SID_model == 8580)
        {
            cutoff = (int)((1 - exp(cutoff * cutoff_ratio_8580)) * 0x10000);
            resonance = (int)((pow(2, ((4 - resonance) / 8.0))) * 0x100); //resonance could be taken from table as well
        }
        else
        {
            cutoff = (int)((cutoff_bias_6581 + ((cutoff < 192) ? 0 : 1 - exp((cutoff - 192) * cutoff_ratio_6581))) * 0x10000);
            resonance = (int)(((resonance > 6) ? 8.0 / resonance : 1.41) * 0x100);
        }
        int filtout = 0; //the filter-calculation itself can't be prescaled because sound-quality would suffer of no 'oversampling'
        long int ftmp = filtin + prev[0] * resonance / 0x100 + prev[1];
        if (mode & 1) filtout -= ftmp;
        ftmp = prev[0] - ftmp * cutoff / 0x10000;
        prev[0] = ftmp;
        if (mode & 2) filtout -= ftmp;
        ftmp = prev[1] + ftmp * cutoff / 0x10000;
        prev[1] = ftmp;
        if (mode & 4) filtout += ftmp;

        return filtout / 32768.0;
    }

    static const int trisaw[4096] = {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,192,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,384,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,192,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,1536,2304,2304,2304,2304,2304,2304,2328,2304,2304,2304,2304,2304,2304,2352,2388,2688,2688,2688,2688,2688,2688,2688,2712,2880,2880,2880,2880,2976,2976,3024,3060,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,768,768,768,852,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,384,384,384,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,192,192,288,288,336,372,4608,
4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4692,4608,4608,4608,4608,4608,4608,4608,4632,4608,4608,4608,4608,4608,4704,4752,4788,5376,5376,5376,5376,5376,5376,5376,5400,5376,5376,5376,5376,5376,5376,5424,5460,5760,5760,5760,5760,5760,5760,5760,5784,5952,5952,5952,5952,6048,6048,6096,6132,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,384,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,192,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,1536,1536,1536,1536,1536,1632,1680,1716,2304,2304,2304,2304,2304,2304,2304,2328,2304,2304,2304,2304,2304,2304,2352,2388,2688,2688,2688,2688,2688,2688,2688,2712,2880,2880,2880,2880,2976,2976,3024,3060,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,768,768,768,768,768,768,768,852,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,384,384,384,408,6720,6720,6720,6720,6816,6816,6864,6900,9216,
9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9300,9216,9216,9216,9216,9216,9216,9216,9240,9216,9216,9216,9216,9216,9216,9360,9396,9216,9216,9216,9216,9216,9216,9216,9240,9216,9216,9216,9216,9216,9216,9216,9300,9216,9216,9216,9216,9216,9216,9216,9240,9216,9216,9408,9408,9504,9504,9552,9588,10752,
10752,10752,10752,10752,10752,10752,10752,10752,10752,10752,10752,10752,10752,10752,10836,10752,10752,10752,10752,10752,10752,10752,10776,10752,10752,10752,10752,10752,10848,10896,10932,11520,11520,11520,11520,11520,11520,11520,11544,11520,11520,11520,11520,11520,11520,11568,11604,11904,11904,11904,11904,11904,11904,11904,11928,12096,12096,12096,12096,12192,12192,12240,12276,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,384,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,192,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,2304,2304,2304,2304,2304,2304,2304,2328,2304,2304,2304,2304,2304,2304,2352,2388,2688,2688,2688,2688,2688,2688,2688,2712,2880,2880,2880,2880,2976,2976,3024,3060,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,768,768,768,768,852,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,384,384,384,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,3072,3072,3072,3072,3072,3072,3072,3156,3072,3072,3072,3072,3072,3072,3072,3096,3072,3072,3264,3264,3360,3360,3408,3444,4608,
4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4692,4608,4608,4608,4608,4608,4608,4608,4632,4608,4608,4608,4608,4608,4704,4752,4788,5376,5376,5376,5376,5376,5376,5376,5400,5376,5376,5376,5376,5376,5376,5424,5460,5760,5760,5760,5760,5760,5760,5760,5784,5952,5952,5952,5952,6048,6048,6096,6132,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,384,384,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,192,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,1536,1536,1536,1536,1536,1536,1536,1560,1536,1536,1536,1536,1536,1632,1680,1716,2304,2304,2304,2304,2304,2304,2304,2328,2304,2304,2304,2304,2304,2304,2352,2388,2688,2688,2688,2688,2688,2688,2688,2712,2880,2880,2880,2880,2976,2976,3024,3060,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,12288,12288,12288,12288,12288,12288,12288,12372,12288,12288,12288,12288,12288,12288,12288,12312,12288,12288,12288,12288,12288,12288,12432,12468,12288,12288,12288,12288,12288,12288,12288,12312,12288,12288,12288,12288,12288,12288,12288,12372,12288,12288,12288,12288,12288,12288,12288,12312,12864,12864,12864,12864,12960,12960,13008,13044,12288,
12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12372,12288,12288,12288,12288,12288,12288,12288,12312,12288,12288,12288,12288,12288,12288,12432,12468,12288,12288,12288,12288,12288,12288,12288,12312,12288,12288,12288,12288,12288,12288,12288,12372,12288,12288,12288,12288,12288,12288,12288,12312,12288,12288,12288,12480,12576,12576,12624,12660,12288,
12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12372,12288,12288,12288,12288,12288,12288,12288,12312,12288,12288,12288,12288,12288,12384,12432,12468,12288,12288,12288,12288,12288,12288,12288,12312,13056,13056,13056,13056,13056,13056,13056,13140,13440,13440,13440,13440,13440,13440,13440,13464,13632,13632,13632,13632,13728,13728,13776,13812,43008,
43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43092,43008,43008,43008,43008,43008,43008,43008,43032,43008,43008,43008,43008,43008,43008,43152,43188,43008,43008,43008,43008,43008,43008,43008,43032,43008,43008,43008,43008,43008,43008,43008,43092,43008,43008,43008,43008,43008,43008,43008,43032,43008,43008,43008,43008,43296,43296,43344,43380,43008,
43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43092,43008,43008,43008,43008,43008,43008,43008,43032,43008,43008,43008,43008,43008,43104,43152,43188,43008,43008,43008,43008,43008,43008,43008,43032,43008,43008,43008,43008,43008,43008,43008,43092,43008,43008,43008,43008,43392,43392,43392,43416,43584,43584,43584,43584,43680,43680,43728,43764,46080,
46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46164,46080,46080,46080,46080,46080,46080,46080,46104,46080,46080,46080,46080,46080,46080,46224,46260,46080,46080,46080,46080,46080,46080,46080,46104,46080,46080,46080,46080,46080,46080,46080,46164,46080,46080,46080,46080,46080,46080,46080,46104,46080,46080,46272,46272,46368,46368,46416,46452,47616,
47616,47616,47616,47616,47616,47616,47616,47616,47616,47616,47616,47616,47616,47616,47700,47616,47616,47616,47616,47616,47616,47616,47640,47616,47616,47616,47616,47616,47712,47760,47796,48384,48384,48384,48384,48384,48384,48384,48408,48384,48384,48384,48384,48384,48384,48432,48468,48768,48768,48768,48768,48768,48768,48768,48792,48960,48960,48960,48960,49056,49056,49104,49140, 
};

    static const int pulsesaw[4096] = {
0,
0,0,0,0,0,0,36,0,0,0,12,0,0,48,84,0,0,0,12,0,0,0,84,0,0,0,36,96,144,168,180,0,0,0,12,0,0,0,84,0,0,0,36,0,48,168,180,0,0,0,12,0,0,48,84,192,192,288,324,336,336,360,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,288,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,564,0,384,384,396,576,576,624,660,576,672,672,708,720,732,1512,1524,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,96,144,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,180,0,0,0,12,0,0,240,660,576,672,672,708,720,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,168,180,0,0,0,12,0,0,0,84,0,0,288,324,288,336,1128,1140,0,768,768,780,768,768,768,1236,1152,1152,1152,1188,1248,1296,1320,1332,1152,1152,1344,1380,1344,1344,1416,1428,1440,1440,1440,3012,3024,3036,3048,3060,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,84,0,0,0,12,0,0,0,84,0,0,0,36,96,144,168,372,0,0,0,12,0,0,0,84,0,0,0,36,0,48,168,180,0,0,0,12,0,0,48,276,192,192,288,708,720,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,324,288,336,360,372,0,0,0,12,0,0,0,84,0,0,0,420,384,528,1320,1332,1152,1152,1152,1356,1344,1344,1392,1428,1344,1440,1440,1476,1488,1500,1512,1524,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,96,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,180,0,0,0,396,384,576,624,660,576,672,672,2244,2256,2268,2280,2292,1536,
1536,1536,1548,1536,1536,1536,1620,1536,1536,1536,1572,1536,1584,2472,2484,2304,2304,2304,2316,2304,2304,2352,2388,2304,2496,2592,2628,2640,2640,2664,2676,2304,2304,2304,2700,2688,2688,2688,2772,2688,2688,2688,2724,2784,5904,5928,6132,5760,5952,5952,5988,5952,5952,6024,6132,6048,6048,6048,6084,6096,6108,6120,6132,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,84,0,0,0,12,0,0,0,84,0,0,0,36,96,144,168,372,0,0,0,12,0,0,0,84,0,0,0,36,0,48,168,180,0,0,0,12,0,0,48,276,192,192,288,324,336,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,324,288,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,528,552,564,384,384,384,588,576,576,1392,1428,1344,1440,1440,1476,1488,1500,1512,1524,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,96,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,180,0,0,0,12,0,576,624,660,576,672,672,708,720,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,168,180,0,0,0,12,0,0,768,852,768,960,1056,2628,2592,2640,2664,2676,2304,2304,2304,2316,2304,2688,2688,2772,2688,2688,2688,2724,2784,2832,2856,2868,2688,2880,2880,2916,2880,2880,2952,2964,2976,2976,2976,3012,3024,3036,3048,3060,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,84,0,0,0,12,0,0,0,84,0,0,0,36,96,144,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,48,168,180,0,0,0,12,0,0,240,276,192,576,672,708,720,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,192,324,288,336,360,372,0,0,0,12,0,0,768,852,768,1152,1152,1188,1152,4368,4392,4404,4224,4224,4416,4452,4416,4416,4488,4500,4416,4512,4512,4548,4560,4572,4584,4596,3072,
3072,3072,3084,3072,3072,3072,3108,3072,3072,3072,3108,3072,3072,3144,3252,3072,3072,3072,3084,3072,3072,3072,3156,3072,3072,3072,4740,4896,4944,4968,4980,4608,4608,4608,4620,4608,4608,4608,4692,4608,4608,4608,4644,4608,4752,4776,4788,4608,4992,4992,5004,5184,5184,5232,5268,11328,11424,11424,11460,11472,11484,11496,11508,10752,
10752,10752,10764,10752,10752,11520,11604,11520,11520,11520,11556,11520,11568,11688,11700,11520,11520,11520,11532,11520,11520,11568,11604,11712,11712,11808,11844,11856,11868,11880,12276,11520,11904,11904,11916,11904,11904,11904,11988,11904,11904,11904,11940,12000,12048,12072,12276,12096,12096,12096,12132,12096,12096,12168,12276,12192,12192,12192,12228,12240,12252,12264,12276,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,84,0,0,0,12,0,0,0,84,0,0,0,36,96,144,168,180,0,0,0,12,0,0,0,84,0,0,0,36,0,48,168,180,0,0,0,12,0,0,48,84,192,192,288,324,336,348,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,288,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,552,564,384,384,384,396,576,576,624,660,576,672,1440,1476,1488,1500,1512,1524,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,96,144,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,180,0,0,0,12,0,0,624,660,576,672,672,708,720,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,168,180,0,0,0,12,0,0,0,84,0,0,1056,1092,1056,1104,1128,1140,768,768,768,780,768,768,1152,1236,1152,1152,1152,2724,2784,2832,2856,2868,2688,2688,2880,2916,2880,2880,2952,2964,2976,2976,2976,3012,3024,3036,3048,3060,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,84,0,0,0,12,0,0,0,84,0,0,0,36,96,144,168,372,0,0,0,12,0,0,0,84,0,0,0,36,0,48,168,180,0,0,0,12,0,0,48,276,192,192,672,708,720,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,324,288,336,360,372,0,0,0,12,0,0,0,84,0,0,1152,1188,1152,1296,1320,1332,1152,1152,1152,1356,1344,1344,1392,1428,1344,1440,1440,1476,1488,1500,1512,1524,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,96,336,360,372,0,0,0,12,0,0,0,84,0,0,0,1572,1536,4752,4776,4788,4608,4608,4992,5004,4992,5184,5232,5268,5184,5280,5280,5316,5328,5340,5352,5364,4608,
4608,4608,4620,4608,4608,4608,4692,4608,4608,5376,5412,5376,5424,5544,5556,5376,5376,5376,5388,5376,5376,5424,5460,5376,5568,5664,5700,5712,5712,5736,5748,5376,5376,5760,5772,5760,5760,5760,5844,5760,5760,5760,5796,5856,5904,5928,6132,5760,5952,5952,5988,5952,5952,6024,6132,6048,6048,6048,6084,6096,6108,6120,6132,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,84,0,0,0,12,0,0,0,84,0,0,0,36,96,144,168,372,0,0,0,12,0,0,0,84,0,0,0,36,0,48,168,180,0,0,0,12,0,0,48,276,192,192,288,324,720,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,324,288,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,384,528,552,564,384,384,1152,1356,1344,1344,1392,1428,1344,1440,1440,1476,1488,1500,1512,1524,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,96,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,180,0,0,0,12,384,576,624,660,6720,6816,6816,6852,6864,6876,6888,6900,6144,
6144,6144,6156,6144,6144,6144,6180,6144,6144,6144,7716,7680,7680,7848,7860,7680,7680,8448,8460,8448,8448,8448,8532,8448,8640,8736,8772,8736,8784,8808,8820,8448,8448,8448,8460,8832,8832,8832,8916,8832,8832,8832,21156,21216,21264,21288,21300,21120,21312,21312,21348,21312,21312,21384,21396,21408,21408,21408,21444,21456,21468,21480,21492,6144,
18432,18432,18432,18432,18432,18432,18468,18432,18432,18432,18468,18432,18432,18504,18612,18432,18432,18432,18444,18432,18432,18432,18516,18432,18432,18432,18564,18528,18576,18792,18804,18432,18432,18432,18444,18432,18432,18432,18516,18432,18432,18432,18468,18432,21648,21672,21684,21504,21504,21504,21516,21504,21504,21744,21780,22080,22176,22176,22212,22224,22236,22248,22260,21504,
21504,21504,21516,21504,21504,21504,21540,21504,21504,21504,21540,21504,21504,21672,21684,21504,21504,21504,21516,21504,21504,21504,21588,21504,21504,21792,21828,21792,21840,21864,21876,21504,21504,22272,22284,22272,22272,22272,22356,22656,22656,22656,22692,22752,22800,22824,22836,22656,22656,22848,22884,22848,22848,22920,22932,22944,22944,22944,22980,22992,23004,23016,23028,21504,
21504,21504,21516,21504,21504,21504,21540,21504,21504,21504,23076,23040,23040,23112,23220,23040,23040,23040,23052,23040,23040,23040,23124,23040,23040,23040,23172,23328,23376,23400,23412,23040,23040,23040,23052,23040,23040,23040,23124,23040,23040,23040,23076,23040,23184,23208,23604,23424,23424,23424,23436,23616,23616,23664,23700,23616,23712,23712,23748,23760,24540,24552,24564,23040,
23040,23808,23820,23808,23808,23808,23892,23808,23808,23808,23844,23808,23856,23976,23988,23808,23808,23808,23820,23808,23808,23856,24084,24000,24000,24096,24132,24144,24156,24552,24564,24192,24192,24192,24204,24192,24192,24192,24276,24192,24192,24192,24228,24288,24336,24360,24564,24384,24384,24384,24420,24384,24384,24456,24564,24480,24480,24480,24516,24528,24540,24552,24564,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,84,0,0,0,12,0,0,0,84,0,0,0,36,96,144,168,180,0,0,0,12,0,0,0,84,0,0,0,36,0,48,168,180,0,0,0,12,0,0,48,84,192,192,288,324,336,336,360,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,288,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,564,384,384,384,396,576,576,624,660,576,672,672,708,1488,1500,1512,1524,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,96,144,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,180,0,0,0,12,0,0,240,660,576,672,672,708,720,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,168,180,0,0,0,12,0,0,0,84,0,0,288,324,1056,1104,1128,1140,768,768,768,780,768,768,768,1236,1152,1152,1152,1188,1248,1296,1320,1332,1152,1152,1344,2916,2880,2880,2952,2964,2976,2976,2976,3012,3024,3036,3048,3060,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,84,0,0,0,12,0,0,0,84,0,0,0,36,96,144,168,372,0,0,0,12,0,0,0,84,0,0,0,36,0,48,168,180,0,0,0,12,0,0,48,276,192,192,288,708,720,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,324,288,336,360,372,0,0,0,12,0,0,0,84,0,0,0,420,1152,1296,1320,1332,1152,1152,1152,1356,1344,1344,1392,1428,1344,1440,1440,1476,1488,1500,1512,1524,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,96,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,180,0,0,0,1932,1920,2112,2160,2196,2112,2208,2208,2244,2256,2268,2280,2292,1536,
1536,1536,1548,1536,1536,1536,1620,1536,1536,1536,1572,2304,5424,5544,5556,5376,5376,5376,5388,5376,5376,5424,5460,5376,5568,5664,5700,5712,5712,5736,5748,5376,5376,5376,5772,5760,5760,5760,5844,5760,5760,5760,5796,5856,5904,5928,6132,5760,5952,5952,5988,5952,5952,6024,6132,6048,6048,6048,6084,6096,6108,6120,6132,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,84,0,0,0,12,0,0,0,84,0,0,0,36,96,144,168,372,0,0,0,12,0,0,0,84,0,0,0,36,0,48,168,180,0,0,0,12,0,0,48,276,192,192,288,324,336,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,324,288,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,528,552,564,384,384,384,588,1344,1344,1392,1428,1344,1440,1440,1476,1488,1500,1512,1524,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,96,336,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,180,0,0,0,12,0,576,624,660,576,672,672,708,720,732,744,756,0,
0,0,12,0,0,0,36,0,0,0,36,0,0,168,180,0,0,0,1548,2304,2304,2304,2388,2304,2496,2592,2628,2592,2640,2664,2676,2304,2304,2304,2316,2304,2688,2688,2772,2688,2688,2688,2724,2784,2832,2856,2868,2688,2880,2880,2916,2880,2880,2952,2964,2976,2976,2976,3012,3024,3036,3048,3060,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,180,0,0,0,12,0,0,0,84,0,0,0,132,96,144,360,372,0,0,0,12,0,0,0,84,0,0,0,36,0,144,168,180,0,0,0,12,0,0,240,276,6336,6816,6816,6852,6864,6876,6888,6900,6144,
6144,6144,6156,6144,6144,6144,6180,6144,6144,6144,6180,6144,9216,9384,9396,9216,9216,9216,9228,9216,9216,9216,9300,9216,9216,9504,9540,9504,9552,9576,9588,9216,9216,9216,9228,9984,9984,9984,10068,9984,10368,10368,10404,10464,10512,10536,10548,10368,10368,10560,10596,10560,10560,10632,10644,10656,10656,10656,10692,10704,10716,10728,10740,9216,
9216,9216,9228,9216,9216,9216,9252,9216,9216,9216,9252,9216,9216,9288,9396,9216,9216,9216,10764,10752,10752,10752,10836,10752,10752,10752,10884,11040,11088,11112,11124,10752,10752,10752,10764,10752,10752,10752,10836,10752,10752,10752,10788,10752,10896,10920,10932,10752,11136,11136,11148,11328,11328,11376,11412,11328,11424,11424,11460,36048,36060,36072,36852,10752,
10752,35328,35340,36096,36096,36096,36180,36096,36096,36096,36132,36096,36144,36264,36276,36096,36096,36096,36108,36096,36096,36144,36372,36288,36288,36384,36420,36432,36444,36840,36852,36096,36480,36480,36492,36480,36480,36480,36564,36480,36480,36480,36516,36576,36624,36648,36852,36672,36672,36672,36708,36672,36672,36744,36852,36768,36768,36768,36804,36816,36828,36840,36852,0,
0,0,0,0,0,0,36,0,0,0,36,0,0,72,84,0,0,0,12,0,24576,24576,24660,24576,24576,24576,24612,24672,24720,24744,24948,24576,24576,24576,24588,24576,24576,24576,24660,24576,24576,24576,24612,24576,24624,24744,24756,24576,24576,24576,24588,24576,24576,24624,24852,24768,24768,24864,24900,24912,24924,25320,25332,24576,
24576,24576,24588,24576,24576,24576,24612,24576,24576,24576,24612,24576,24576,24648,24756,24576,24576,24576,24588,24576,24576,24576,24660,24576,24576,24576,24900,24864,24912,24936,24948,24576,24576,24576,24588,24576,24576,24576,24660,24576,24576,24576,24612,24576,24720,25128,25140,24960,24960,24960,25164,25152,25152,25200,25236,25920,26016,26016,26052,26064,26076,26088,26100,24576,
24576,24576,24576,24576,24576,24576,24612,24576,24576,24576,24612,24576,24576,24648,24756,24576,24576,24576,24588,24576,24576,24576,24660,24576,24576,24576,24708,24672,24912,24936,24948,24576,24576,24576,24588,24576,24576,24576,24660,24576,24576,24576,24612,24576,24720,24744,24756,24576,24576,24576,24588,24576,24768,25200,25236,25152,25248,25248,25284,25296,25308,25320,25332,24576,
24576,24576,24588,24576,24576,24576,24612,24576,24576,24576,24612,24576,24576,24744,24756,24576,24576,24576,24588,24576,24576,24576,24660,25344,25536,25632,25668,25632,25680,25704,25716,25344,25344,25344,26892,26880,26880,27264,27348,27264,27264,27264,39588,39648,39696,39720,39732,39552,39744,39744,39780,39744,39744,39816,39828,39840,39840,39840,39876,39888,39900,39912,39924,24576,
36864,36864,36864,36864,36864,36864,36900,36864,36864,36864,36900,36864,36864,36936,36948,36864,36864,36864,36876,36864,36864,36864,36948,36864,36864,36864,36900,36960,37008,37224,37236,36864,36864,36864,36876,36864,36864,36864,36948,36864,36864,36864,36900,36864,36912,37032,37044,36864,36864,36864,36876,36864,36864,37104,37140,37056,37056,37536,37572,37584,37596,37608,37620,36864,
36864,36864,36876,36864,36864,36864,36900,36864,36864,36864,36900,36864,36864,36936,37044,36864,36864,36864,36876,36864,36864,36864,36948,36864,36864,37056,37188,37152,37200,37224,37236,36864,36864,36864,36876,36864,36864,36864,36948,37632,37632,38016,38052,38016,38160,38184,38196,38016,38016,38208,38244,38208,38208,38280,38292,38208,38304,38304,38340,38352,38364,38376,38388,36864,
36864,36864,36876,36864,36864,36864,36900,36864,36864,36864,36900,36864,39936,40008,40116,39936,39936,39936,39948,39936,39936,39936,40020,39936,39936,39936,40068,40224,40272,40296,40308,39936,39936,39936,41484,41472,41472,41472,41556,41472,41472,41472,41508,41472,41616,41640,41652,41472,41472,41856,41868,42048,42048,42096,42132,42048,42144,42144,42180,42192,42204,42216,42228,41472,
41472,41472,41484,41472,41472,41472,41556,42240,42240,42240,42276,42240,42288,42408,42420,42240,42240,42240,42252,42240,42240,42288,42324,42432,42432,42528,42564,42576,42576,42600,42996,42240,42240,42624,42636,42624,42624,42624,42708,42624,42624,42624,42660,42720,42768,42792,42996,42816,42816,42816,42852,42816,42816,42888,42996,42912,42912,42912,42948,42960,42972,42984,42996,36864,
36864,36864,36864,36864,36864,36864,36900,36864,36864,36864,36900,36864,36864,36936,36948,36864,36864,36864,36876,36864,36864,36864,36948,36864,36864,36864,36900,36960,37008,37032,37236,36864,36864,36864,36876,36864,36864,36864,36948,36864,36864,36864,36900,36864,36912,37032,37044,36864,36864,36864,36876,36864,36864,36912,37140,43200,43200,43296,43332,43728,43740,43752,43764,43008,
43008,43008,43020,43008,43008,43008,43044,43008,43008,43008,43044,43008,43008,43080,43188,43008,43008,43008,43020,43008,43008,43008,43092,43008,43008,43008,43332,43296,43344,43368,43380,43008,43008,43008,43020,43008,43008,43008,43092,43008,43008,43008,43044,43392,43536,43560,44340,44160,44160,44160,44364,44352,44352,44400,44436,44352,44448,44448,44484,44496,44508,44520,44532,43008,
43008,43008,43020,43008,43008,43008,43044,43008,43008,43008,43044,43008,43008,43080,43188,43008,43008,43008,43020,43008,43008,43008,43092,43008,43008,43008,43140,43104,43344,43368,43380,43008,43008,43008,43020,43008,43008,43008,43092,43008,43008,43008,43044,43008,43152,43176,43188,43008,43008,43008,43020,43392,43584,43632,43668,43584,43680,43680,43716,43728,45276,45288,45300,43008,
43008,43008,44556,44544,44544,44544,44580,44544,44544,44544,44580,44544,44544,44712,45492,45312,45312,45312,45324,45312,45312,45312,45396,45312,45504,45600,45636,45600,45648,45672,45684,45312,45312,45312,45324,45696,45696,45696,45780,45696,45696,45696,45732,45792,45840,45864,45876,45696,45888,45888,45924,45888,45888,45960,49140,49056,49056,49056,49092,49104,49116,49128,49140,43008,
43008,43008,43008,43008,43008,43008,43044,43008,43008,43008,43044,43008,46080,46152,46260,46080,46080,46080,46092,46080,46080,46080,46164,46080,46080,46080,46212,46176,46224,46440,46452,46080,46080,46080,46092,46080,46080,46080,46164,46080,46080,46080,46116,46080,46224,46248,46260,46080,46080,46080,46092,46080,46080,46320,46740,46656,46752,46752,46788,46800,46812,46824,46836,46080,
46080,46080,46092,46080,46080,46080,46116,46080,46080,46080,46116,46080,46080,46248,46260,46080,46080,46080,46092,46080,46080,46080,46164,46080,46080,46368,46404,46368,46416,47208,47220,46848,46848,46848,46860,46848,46848,46848,47316,47232,47232,47232,47268,47328,47376,47400,47412,47232,47232,47424,47460,47424,47424,47496,47508,49056,49056,49056,49092,49104,49116,49128,49140,46080,
46080,46080,47628,47616,47616,47616,47652,47616,47616,47616,47652,47616,47616,47688,47796,47616,47616,47616,47628,47616,47616,47616,47700,47616,47616,47616,47748,47904,47952,47976,47988,47616,47616,47616,47628,47616,47616,47616,47700,47616,47616,47616,47652,47616,47760,47784,48180,48000,48000,48000,48012,48192,48192,48240,48276,48192,48288,48288,49092,49104,49116,49128,49140,48384,
48384,48384,48396,48384,48384,48384,48468,48384,48384,48384,48420,48384,48432,48552,48564,48384,48384,48384,48396,48384,48384,48432,48660,48576,48576,48672,48708,48720,49116,49128,49140,48768,48768,48768,48780,48768,48768,48768,48852,48768,48768,48768,48804,48864,48912,48936,49140,48960,48960,48960,48996,48960,48960,49032,49140,49056,49056,49056,49092,49104,49116,49128,49140,
    };

    static const int pulsetrisaw[4096] = {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,192,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,1536,2304,2304,2304,2304,2304,2304,2328,2304,2304,2304,2304,2304,2304,2304,2388,2688,2688,2688,2688,2688,2688,2688,2712,2880,2880,2880,2880,2976,2976,3024,3060,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,768,852,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,384,384,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,192,192,288,288,336,372,4608,
4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4680,4608,4608,4608,4608,4608,4608,4608,4632,4608,4608,4608,4608,4608,4704,4752,4788,5376,5376,5376,5376,5376,5376,5376,5400,5376,5376,5376,5376,5376,5376,5376,5460,5760,5760,5760,5760,5760,5760,5760,5784,5952,5952,5952,5952,6048,6048,6096,6132,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,384,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,192,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,1536,1536,1536,1632,1680,1716,2304,2304,2304,2304,2304,2304,2304,2328,2304,2304,2304,2304,2304,2304,2304,2388,2688,2688,2688,2688,2688,2688,2688,2712,2880,2880,2880,2880,2976,2976,3024,3060,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,768,768,768,768,768,852,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,384,384,384,408,576,576,576,576,672,672,720,756,9216,
9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9288,9216,9216,9216,9216,9216,9216,9216,9240,9216,9216,9216,9216,9216,9216,9360,9396,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9300,9216,9216,9216,9216,9216,9216,9216,9240,9216,9216,9408,9408,9504,9504,9552,9588,10752,
10752,10752,10752,10752,10752,10752,10752,10752,10752,10752,10752,10752,10752,10752,10824,10752,10752,10752,10752,10752,10752,10752,10776,10752,10752,10752,10752,10752,10848,10896,10932,11520,11520,11520,11520,11520,11520,11520,11544,11520,11520,11520,11520,11520,11520,11520,11604,11904,11904,11904,11904,11904,11904,11904,11928,12096,12096,12096,12096,12192,12192,12240,12276,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,2304,2304,2304,2304,2304,2304,2304,2328,2304,2304,2304,2304,2304,2304,2304,2388,2688,2688,2688,2688,2688,2688,2688,2712,2880,2880,2880,2880,2976,2976,3024,3060,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,768,768,768,852,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,384,384,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,3072,3072,3072,3072,3072,3072,3072,3096,3072,3072,3264,3264,3360,3360,3408,3444,4608,
4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4608,4680,4608,4608,4608,4608,4608,4608,4608,4632,4608,4608,4608,4608,4608,4704,4752,4788,5376,5376,5376,5376,5376,5376,5376,5400,5376,5376,5376,5376,5376,5376,5376,5460,5760,5760,5760,5760,5760,5760,5760,5784,5952,5952,5952,5952,6048,6048,6096,6132,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,96,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,1152,1152,1152,1152,1152,1152,1152,1176,1344,1344,1344,1344,1440,1440,1488,1524,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,84,0,0,0,0,0,0,384,408,576,576,576,576,672,672,720,756,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,192,192,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,1536,1536,1536,1536,1536,1560,1536,1536,1536,1536,1536,1632,1680,1716,2304,2304,2304,2304,2304,2304,2304,2328,2304,2304,2304,2304,2304,2304,2304,2388,2688,2688,2688,2688,2688,2688,2688,2712,2880,2880,2880,2880,2976,2976,3024,3060,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,24,0,0,0,0,288,288,336,372,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,24,0,0,0,0,0,0,144,180,12288,12288,12288,12288,12288,12288,12288,12312,12288,12288,12288,12288,12288,12288,12288,12372,12288,12288,12288,12288,12288,12288,12288,12312,12864,12864,12864,12864,12960,12960,13008,13044,12288,
12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12360,12288,12288,12288,12288,12288,12288,12288,12312,12288,12288,12288,12288,12288,12288,12432,12468,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12372,12288,12288,12288,12288,12288,12288,12288,12312,12288,12288,12288,12480,12576,12576,12624,12660,12288,
12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12288,12360,12288,12288,12288,12288,12288,12288,12288,12312,12288,12288,12288,12288,12288,12384,12432,12468,12288,12288,12288,12288,12288,12288,12288,12312,13056,13056,13056,13056,13056,13056,13056,13140,13440,13440,13440,13440,13440,13440,13440,13464,13632,13632,13632,13632,13728,13728,13776,13812,18432,
18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18504,18432,18432,18432,18432,18432,18432,18432,18456,18432,18432,18432,18432,18432,18432,18576,18612,18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18432,18516,18432,18432,18432,18432,18432,18432,18432,18456,18432,18432,18432,18432,18720,18720,18768,18804,43008,
43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43008,43080,43008,43008,43008,43008,43008,43008,43008,43032,43008,43008,43008,43008,43008,43008,43152,43188,43008,43008,43008,43008,43008,43008,43008,43032,43008,43008,43008,43008,43008,43008,43008,43092,43008,43008,43008,43008,43392,43392,43392,43416,43584,43584,43584,43584,43680,43680,43728,43764,46080,
46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46152,46080,46080,46080,46080,46080,46080,46080,46104,46080,46080,46080,46080,46080,46080,46224,46260,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46080,46164,46080,46080,46080,46080,46080,46080,46080,46104,46080,46080,46272,46272,46368,46368,46416,46452,47616,
47616,47616,47616,47616,47616,47616,47616,47616,47616,47616,47616,47616,47616,47616,47688,47616,47616,47616,47616,47616,47616,47616,47640,47616,47616,47616,47616,47616,47712,47760,47796,48384,48384,48384,48384,48384,48384,48384,48408,48384,48384,48384,48384,48384,48384,48384,48468,48768,48768,48768,48768,48768,48768,48768,48792,48960,48960,48960,48960,49056,49056,49104,49140,
    };
    double sidvoice(double a_freq, double a_pulseduty, double a_mode, int cell, int memofs)
    {
        struct data
        {
            int phaseaccu;
            int prevaccu;
            int noise_LFSR;
            int prevwfout;
        } *prev = (struct data*)(gCelldata[cell].mDynmem + memofs);


        if (prev->noise_LFSR == 0)
        {
            prev->noise_LFSR = 0x7FFFF8;
        }

        // mode: 6581/test/noise/pulse/sawtooth/triangle
        int mode = (int)a_mode;
        int wf = mode & 0xf; // noise/pulse/saw/triangle
        int test = mode & (1 << 4);
        int wfout = 0;

        /*
        fout = fn * clock/16M

        fn = fout / (clock/16M)

        */

        int accuadd = (int)(a_freq * 16.7772160 * 22.68 * gSamplerate / 44100.0); // TODO: figure out the actual formula instead of magic numbers
        if (test)
        {
            prev->phaseaccu = 0;
        }
        else
        {
            prev->phaseaccu += accuadd;
            prev->phaseaccu &= 0xFFFFFF;
        }
        if (wf & (1 << 3)) //NOISE_BITMASK)
        {
            int tmp = prev->noise_LFSR;
            if (((prev->phaseaccu & 0x100000) != (prev->prevaccu & 0x100000)))
            {
                int step = (tmp & 0x400000) ^ ((tmp & 0x20000) << 5);
                tmp = ((tmp << 1) + (step ? 1 : test)) & 0x7FFFFF;
                prev->noise_LFSR = tmp;
            }
            wfout = (wf & 0x7) ? 0 : 
                ((tmp & 0x100000) >> 5) + 
                ((tmp & 0x40000) >> 4) + 
                ((tmp & 0x4000) >> 1) + 
                ((tmp & 0x800) << 1) + 
                ((tmp & 0x200) << 2) + 
                ((tmp & 0x20) << 5) + 
                ((tmp & 0x04) << 7) + 
                ((tmp & 0x01) << 8);
        }
        else if (wf & (1 << 2)) //PULSE_BITMASK)
        {
            int pw = (int)(a_pulseduty * 0x10000);
                //(vReg[2] + (vReg[3] & 0xF) * 256) * 16;

            int tmp = prev->phaseaccu >> 8;
            if (wf == (1 << 2))//PULSE_BITMASK)
            {
                if (test || tmp >= pw)
                {
                    wfout = 0xFFFF;
                }
                else
                {
                    wfout = 0;
                }
            }
            else
            { //combined pulse
                wfout = (tmp >= pw || test) ? 0xFFFF : 0;
                if (wf & (1 << 0))//TRI_BITMASK)
                {
                    if (wf & (1 << 1)) //SAW_BITMASK)
                    {
                        int t = tmp >> 4;
                        if (mode & (1 << 5)) // 6851
                            t &= 0x7ff;
                        wfout = (wfout) ? pulsetrisaw[t] : 0;
                    } //pulse+saw+triangle (waveform nearly identical to tri+saw)
                    else
                    {   
                        tmp = prev->phaseaccu;
                        wfout = (wfout) ? pulsesaw[(tmp ^ (tmp & 0x800000 ? 0xFFFFFF : 0)) >> 11] : 0;
                    }
                } //pulse+triangle
                else
                {
                    if (wf & (1 << 1)) //SAW_BITMASK)
                    {
                        int t = tmp >> 4;
                        if (mode & (1 << 5)) // 6851
                            t &= 0x7ff;

                        wfout = (wfout) ? pulsesaw[t] : 0;
                    }
                }
            }
        } //pulse+saw
        else if (wf & (1 << 1))//SAW_BITMASK)
        {
            wfout = prev->phaseaccu >> 8; //saw
            int t = wfout >> 4;
            if (mode & (1 << 5)) // 6851
                t &= 0x7ff;

            if (wf & (1 << 0)) wfout = trisaw[t]; //saw+triangle // TRI_BITMASK
        }
        else if (wf & (1 << 0)) // TRI_BITMASK)
        {
            int tmp = prev->phaseaccu;
            wfout = (tmp ^ (tmp & 0x800000 ? 0xFFFFFF : 0)) >> 7;
        }
        if (wf)
        {
            prev->prevwfout = wfout;
        }
        else {
            wfout = prev->prevwfout;
        } //emulate waveform 00 floating wave-DAC
        prev->prevaccu = prev->phaseaccu;

        return (wfout - 0x8000) / 32768.0;
    }


    double sidenvelope(double a_attack, double a_decay, double a_sustain, double a_release, double a_gate, int cell, int memofs)
    {
        enum {
            GATE_BITMASK = 0x01,
            SYNC_BITMASK = 0x02,
            RING_BITMASK = 0x04,
            TEST_BITMASK = 0x08,
            TRI_BITMASK = 0x10,
            SAW_BITMASK = 0x20,
            PULSE_BITMASK = 0x40,
            NOISE_BITMASK = 0x80,
            HOLDZERO_BITMASK = 0x10,
            DECAYSUSTAIN_BITMASK = 0x40,
            ATTACK_BITMASK = 0x80,
            LOWPASS_BITMASK = 0x10,
            BANDPASS_BITMASK = 0x20,
            HIGHPASS_BITMASK = 0x40,
            OFF3_BITMASK = 0x80
        };
        int ADSRperiods[16] = { 9,  32,  63,  95,  149,  220,  267,  313,  392,  977,  1954,  3126,  3907,  11720,  19532,  31251 };
        const int ADSR_exptable[256] = {
          1,  30,  30,  30,  30,  30,  30,  16,  16,  16,  16,  16,  16,  16,  16,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  4,  4,  4,  4,  4, //pos0:1  pos6:30  pos14:16  pos26:8
          4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
          2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,  1, //pos54:4 //pos93:2
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
        };


        // storage
        struct dataStruct
        {
            int ADSRstate;
            int ratecnt;
            int expcnt;
            int envcnt;
        } *data = (struct dataStruct*)(gCelldata[cell].mDynmem + memofs);



        int attack = (int)(15 * a_attack) & 15;
        int decay = (int)(15 * a_decay) & 15;
        int sustain = (int)(15 * a_sustain) & 15;
        int release = (int)(15 * a_release) & 15;
        int gate = (a_gate > 0.5);
        //ADSR envelope generator:
        int period;
        int prevgate = !!(data->ADSRstate & GATE_BITMASK);
        if (prevgate != gate)
        { //gatebit-change?
            if (prevgate)
            {
                data->ADSRstate &= 0xFF - (GATE_BITMASK | ATTACK_BITMASK | DECAYSUSTAIN_BITMASK);
            } //falling edge
            else
            {
                data->ADSRstate = (GATE_BITMASK | ATTACK_BITMASK | DECAYSUSTAIN_BITMASK); //rising edge, also sets hold_zero_bit=0
            }
        }
        if (data->ADSRstate & ATTACK_BITMASK)
        {
            period = ADSRperiods[attack]; // attack
        }
        else
        {
            if (data->ADSRstate & DECAYSUSTAIN_BITMASK)
            {
                period = ADSRperiods[decay]; // decay
            }
            else
            {
                period = ADSRperiods[release];
            }
        }
        data->ratecnt++;
        data->ratecnt &= 0x7FFF; //can wrap around (ADSR delay-bug: short 1st frame)
        if (data->ratecnt == period)
        { //ratecounter shot (matches rateperiod) (in genuine SID ratecounter is LFSR)
            data->ratecnt = 0; //reset rate-counter on period-match
            if ((data->ADSRstate & ATTACK_BITMASK) || ++data->expcnt == ADSR_exptable[data->envcnt])
            {
                data->expcnt = 0;
                if (!(data->ADSRstate & HOLDZERO_BITMASK))
                {
                    if (data->ADSRstate & ATTACK_BITMASK)
                    {
                        data->envcnt++;
                        if (data->envcnt == 0xFF)
                        {
                            data->ADSRstate &= 0xFF - ATTACK_BITMASK;
                        }
                    }
                    else
                    {
                        if (!(data->ADSRstate & DECAYSUSTAIN_BITMASK) || data->envcnt != (sustain * 0x11))
                        {
                            data->envcnt--; //resid adds 1 cycle delay, we omit that pipelining mechanism here
                        }
                        if (data->envcnt == 0)
                        {
                            data->ADSRstate |= HOLDZERO_BITMASK;
                        }
                    }
                }
            }
        }
        return data->envcnt / 256.0;
    }

};
